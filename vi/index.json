[{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/","title":"Xây dựng app âm nhạc với core backend là elastic beanstalk và amplify để quản lý front end","tags":[],"description":"","content":"Xây dựng ứng dụng nghe nhạc serverless với AWS Tổng quan Trong bài lab này, bạn sẽ học cách triển khai một ứng dụng nghe nhạc bằng Elastic Beanstalk làm lõi cho backend và sử dụng Amplify cùng Amazon Cognito cho frontend.\nNội dung Giới thiệu về bài lab Kiến thức và những điều cần biết trước khi bắt đầu bài lab Cách triển khai backend Cách triển khai frontend Cách tạo aws key Cách dọn dẹp "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/1-introduce/1.2-structure/","title":"Cấu trúc công nghệ của bài lab","tags":[],"description":"","content":"AWS Structure "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/2-preparation/2.1-thesourcecodeoftheapp/","title":"Chuẩn bị Backend và Frontend","tags":[],"description":"","content":"Công nghệ cho Backend và Frontend Frontend Java (Android)\nJava được chọn vì là một trong những ngôn ngữ ổn định và được sử dụng rộng rãi nhất trong phát triển ứng dụng Android. Retrofit để giao tiếp với API và Amplify SDK để tích hợp AWS. Sử dụng XML layouts để xây dựng giao diện người dùng (UI) linh hoạt và phản hồi tốt. Có sự hỗ trợ lâu dài và cộng đồng lập trình viên lớn, khiến Java trở thành một lựa chọn đáng tin cậy. XML (Thiết kế giao diện)\nCung cấp một cách có cấu trúc và linh hoạt để thiết kế các thành phần UI. Tách biệt phần thiết kế khỏi logic, giúp ứng dụng dễ bảo trì và mở rộng. Tích hợp tốt với hệ thống xem trước (preview) của Android Studio. Backend Spring Boot (Java)\nĐược chọn vì sự đơn giản và hệ sinh thái mạnh mẽ trong việc xây dựng RESTful APIs. Hỗ trợ phát triển nhanh chóng với các máy chủ nhúng như Tomcat. Rất phù hợp cho triển khai trên đám mây (Elastic Beanstalk). Tích hợp sẵn với JPA/Hibernate cho các thao tác cơ sở dữ liệu. Maven (Quản lý Build \u0026amp; Dependency)\nTự động hóa việc build dự án, quản lý thư viện (dependencies), và đóng gói thành tệp .jar. Đảm bảo tính nhất quán giữa các môi trường và đơn giản hóa việc triển khai lên AWS Elastic Beanstalk. "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Trong bước này, chúng ta sẽ nói về mục đích của phần này và cấu trúc tổng thể của bài thực hành.\nNội dung Mục đích của bài thực hành Cấu trúc công nghệ của bài thực hành "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/1-introduce/1.1-purpose/","title":"Mục đích của ứng dụng","tags":[],"description":"","content":"Giới thiệu Trong bối cảnh sự phát triển nhanh chóng của công nghệ số, âm nhạc đã trở thành một phần không thể thiếu trong đời sống hàng ngày của con người. Việc tạo ra một ứng dụng phát nhạc trực tuyến không chỉ đáp ứng nhu cầu giải trí mà còn kết nối người dùng với một thế giới âm nhạc đa dạng và phong phú. Với sự phổ biến của các nền tảng như Spotify, việc phát triển một ứng dụng tương tự và tích hợp các tính năng hiện đại, thân thiện với người dùng là một giải pháp hiệu quả để nâng cao trải nghiệm nghe nhạc và thu hút người dùng.\nDự án này tập trung vào việc xây dựng một ứng dụng phát nhạc trực tuyến dựa trên Java Spring Boot, lấy cảm hứng từ Spotify. Hệ thống được thiết kế với các tính năng chính như:\nPhát nhạc trực tuyến Tạo và quản lý danh sách phát Tìm kiếm và gợi ý bài hát dựa trên sở thích của người dùng Quản lý tài khoản người dùng Hỗ trợ tải nhạc ngoại tuyến để tiện lợi và linh hoạt hơn Quy trình phát triển áp dụng các nguyên lý cốt lõi của Kỹ thuật phần mềm, bao gồm:\nPhân tích yêu cầu (SRS) Thiết kế hệ thống với biểu đồ Use Case, biểu đồ lớp (Class diagrams), biểu đồ tuần tự (Sequence diagrams), và biểu đồ cộng tác (Collaboration diagrams) Xây dựng kiến trúc hệ thống hướng đối tượng Tích hợp API để mang lại trải nghiệm phát nhạc mượt mà và chất lượng cao Thông qua quá trình triển khai dự án, nhóm đã có cơ hội áp dụng kiến thức lý thuyết vào thực tiễn, bao gồm phân tích yêu cầu, thiết kế hệ thống, triển khai và kiểm thử. Quá trình này không chỉ giúp nhóm hiểu sâu hơn về vòng đời phát triển phần mềm mà còn rèn luyện kỹ năng lập trình, giải quyết vấn đề và làm việc nhóm.\nTuy nhiên, do hạn chế về thời gian và kinh nghiệm, quá trình phát triển khó tránh khỏi những thách thức — từ thiết kế giao diện chưa tối ưu cho đến giới hạn về hiệu suất hệ thống. Những thiếu sót này trở thành bài học quý giá, và nhóm luôn sẵn sàng đón nhận những đóng góp, phản hồi để tiếp tục hoàn thiện ứng dụng trong tương lai.\nĐể đảm bảo khả năng mở rộng, bảo mật và độ tin cậy, hệ thống được triển khai trên AWS. Ứng dụng sử dụng Elastic Beanstalk để triển khai backend, RDS (Aurora MySQL) cho quản lý cơ sở dữ liệu, S3 để lưu trữ dữ liệu đa phương tiện, và Amplify (Cognito) cho xác thực và tích hợp frontend. Kiến trúc dựa trên điện toán đám mây này đảm bảo ứng dụng có thể phát triển theo nhu cầu của người dùng đồng thời duy trì hiệu suất và tính sẵn sàng cao.\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/3-backenddeployment/3.1-deploythesongsons3/","title":"Triển khai dữ liệu bài hát","tags":[],"description":"","content":"Bước 1: Chúng ta sẽ cần tạo một S3 bucket\nTrong menu chính, tìm kiếm S3 và nhấp vào nó\nTrong giao diện chính của S3, nhấn Create bucket\nBước 2: Cấu hình bucket Chúng ta cần đặt tên cho bucket và đảm bảo tên là duy nhất. Ở đây tôi sẽ đặt tên bucket là music-app-audio-files\nTrong phần Block Public Access settings for this bucket\nBỏ chọn ô Block all public access rồi xác nhận cảnh báo\nSau đó cuộn xuống cuối và chọn Create bucket\nLưu ý: ghi nhớ tên bucket và khu vực (region) của nó\nBước 3: Triển khai dữ liệu lên bucket Sau khi AWS tạo bucket, nhấp vào bucket vừa tạo\nChọn nút Upload\nSau đó chọn Add folder\nXác định vị trí thư mục chứa bài hát của bạn\nBạn có thể tải thư mục bài hát của tôi tại đây: Songs link Cấu trúc thư mục bài hát của tôi như sau:\nBây giờ chọn Upload\nChờ cho đến khi tải xong toàn bộ\nBước 4: Cấu hình quyền truy cập Sau khi tải xong, bạn có thể kiểm tra cấu trúc giống như hình minh họa.\nBây giờ chọn một thư mục bất kỳ, ở đây tôi chọn bài hát The Riot\nBạn có thể chọn một vài thuộc tính của nó, nhưng tôi khuyên nên chọn ảnh (image) để khi kiểm tra lại thì không bị tải nhạc về máy tính.\nSau khi nhấp vào ảnh, bạn sẽ thấy phần thuộc tính (properties)\nCopy Object URL và dán vào tab mới → sẽ hiển thị Access Denied\nĐiều này là do chúng ta mới bật public cho bucket chứ chưa cho nội dung của nó. Để xem được nội dung, ta cần thêm Bucket Policy.\nQuay lại bucket music-app-audio-files và chọn tab Permissions\nTại đây bạn sẽ thấy bucket policy đang trống và đang cho phép public access.\nChọn nút Edit trong phần bucket policy và dán đoạn sau:\njson { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowPublicRead\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::music-app-audio-files/\u0026#34; } ] } Sau khi chọn Save changes, quay lại tab cũ và reload → bạn sẽ thấy ảnh được hiển thị.\nNhớ thay đổi tên bucket trong Resource thành tên bucket của bạn.\nỞ bước này bạn cũng có thể sử dụng pre-signed URLs trong code (Java backend, Python, …). Tuy nhiên, các URL này sẽ hết hạn sau một thời gian ngắn nhưng an toàn cho truy cập giới hạn.\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/2-preparation/2.2-awsservicesusing/","title":"Các dịch vụ AWS trong Lab","tags":[],"description":"","content":"Backend Elastic Beanstalk Lưu trữ ứng dụng backend Spring Boot (MusicApp.jar) được build bằng Java 21 + Maven. Quy trình triển khai: Code → mvn clean package → tạo file .jar trong thư mục target/. Procfile chạy file .jar trên các instance của EB. eb deploy tải lên và triển khai ứng dụng. Các biến môi trường (DB_URL, DB_USER, DB_PASS, thông tin Gmail SMTP, …) được thiết lập qua eb setenv. Cung cấp load balancing + auto-scaling giúp backend tự động mở rộng theo nhu cầu người dùng. S3 Tạo bucket để lưu trữ tệp (sẽ sử dụng trong ứng dụng nhạc sau này). Các trường hợp sử dụng dự kiến: Lưu file nhạc do nghệ sĩ tải lên. Lưu ảnh bìa album / ảnh hồ sơ. Phục vụ file trực tiếp cho frontend thông qua pre-signed URLs (tải xuống an toàn). Backend có thể tạo pre-signed URLs từ S3 để kiểm soát quyền truy cập. Aurora và RDS Hiện tại sử dụng Amazon RDS (MySQL 8.0) tại ap-southeast-2. Ví dụ cấu hình kết nối: spring.datasource.url=jdbc:mysql://musicapp-db.c7a64kgsc9iz.ap-southeast-2.rds.amazonaws.com:3306/music_app spring.datasource.username=admin spring.datasource.password=****** Lưu trữ: Tài khoản người dùng (id, email, username, password hash). Hồ sơ cá nhân (họ tên, số điện thoại, …). Mã đặt lại mật khẩu \u0026amp; token. Frontend Amplify Tích hợp vào frontend Android (Java) với Amplify Android v2.23.0. Các plugin Amplify trong MyApplication: Auth → Cognito User Pools cho đăng ký / đăng nhập / làm mới token. API (đã cấu hình, nhưng backend vẫn sử dụng Retrofit cho REST). Cách hoạt động trong ứng dụng hiện tại: Người dùng đăng nhập qua Amplify → Cognito cấp ID + access tokens. Retrofit sử dụng các token này (JWT) để gọi API backend trên Elastic Beanstalk. Backend xác thực token, xử lý yêu cầu và truy vấn RDS. Amplify cũng quản lý duy trì phiên đăng nhập (người dùng vẫn đăng nhập khi mở lại ứng dụng). Tóm tắt luồng hoạt động Ứng dụng Android (Amplify Cognito) → Xác thực người dùng. Ứng dụng sử dụng Retrofit APIs → Gọi backend Spring Boot trên Elastic Beanstalk. Backend giao tiếp với RDS (dữ liệu người dùng + dữ liệu ứng dụng) và S3 (lưu trữ media). "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/3-backenddeployment/3.2-deploythedatabaseonaurorards/3.2.1-setuptheaurorardsconfig/","title":"Cấu hình Aurora và RDS","tags":[],"description":"","content":"Mở bảng điều khiển Aurora và RDS sau đó chọn Create database\nChọn MySQL và mẫu Free Tier (bạn có thể chọn tier khác nếu muốn)\nCuộn xuống phần Settings, đặt tên DB instance theo ý muốn, ở đây tôi đặt là musicapp-db, username là admin, mật khẩu tự đặt\nTrong phần Connectivity, đổi Public access thành Yes và giữ nguyên các thiết lập mặc định khác\nCuộn xuống phần Additional Configuration, đổi tên database thành music_app\nSau đó chọn Create database và mở database vừa tạo để xem chi tiết thuộc tính\nNhớ copy lại endpoint để sử dụng sau này. Bây giờ vào EC2 Security Group, chọn security group liên quan\nChọn Edit inbound rule\nThêm một rule mới:\nType: MySQL/Aurora Source: MyIP Lưu ý: bạn có thể đặt source là Anywhere (IPv4) để dễ dàng truy cập hơn.\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/2-preparation/","title":"Chuẩn bị","tags":[],"description":"","content":" Bạn sẽ cần nắm được các công nghệ mà chúng ta sử dụng cho backend và frontend, cũng như các dịch vụ AWS sẽ được dùng trong bài thực hành này.\nNội dung Mã nguồn backend và frontend cùng công nghệ sử dụng Các dịch vụ AWS được sử dụng trong bài thực hành này "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/3-backenddeployment/3.2-deploythedatabaseonaurorards/","title":"Kết nối tới Private instance","tags":[],"description":"","content":"Nội dung: Cấu hình Aurora RDS Thiết lập truy vấn "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/3-backenddeployment/3.2-deploythedatabaseonaurorards/3.2.2-queryfortheaurorards/","title":"Thiết lập truy vấn cho Aurora và RDS","tags":[],"description":"","content":"Mở DBeaver\nNhấp chuột phải và chọn New Connection\nChọn loại cơ sở dữ liệu là MySQL\nĐiền đầy đủ thông tin mà chúng ta đã tạo trước đó\nSau đó tạo một SQL Script mới\nTiếp theo, chạy các file SQL lần lượt từng file một\nlink sql\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/3-backenddeployment/","title":"Cách triển khai backend","tags":[],"description":"","content":"Trong phần này, tôi sẽ hướng dẫn bạn cách triển khai backend trên AWS một cách dễ dàng với 3 bước chính.\nNội dung 3.1. Cách triển khai dữ liệu bài hát trên S3\n3.2. Cách triển khai cơ sở dữ liệu trên Aurora và RDS\n3.3. Cách triển khai backend trên Elastic Beanstalk\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/5-createawskey/","title":"Tạo access key","tags":[],"description":"","content":"Truy cập vào IAM User\nBây giờ chọn Create access key\nChọn tùy chọn CLI\nBỏ qua bước 2 và hãy nhớ tải về tệp CSV, vì nếu bạn quên secret access key thì sẽ mất vĩnh viễn. Do đó hãy tải về để đảm bảo an toàn.\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/6-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Vào Aurora RDS và chọn database, trong phần Action chọn Delete\nLưu ý: không cần tạo bản sao lưu (bạn có thể làm nếu muốn, nhưng tôi không khuyến nghị). Vào S3 và chọn bucket music-app-audio-files\nBạn sẽ cần làm trống nội dung của nó trước khi xóa\nChọn tất cả nội dung trong bucket và chọn Delete\nXác nhận và xóa\nBây giờ quay lại bucket S3, bạn có thể xóa nó\nLưu ý: nếu bạn không thể xóa, hãy vào tab Permission của bucket và kiểm tra Bucket Policy để đảm bảo nó cho phép xóa.\nĐổi Deny thành Allow và bạn sẽ có thể xóa bucket.\nVào Elastic Beanstalk → Environment\nChọn environment và chọn action Terminate\nSau đó vào VPC → Your VPC và xóa toàn bộ VPC\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]