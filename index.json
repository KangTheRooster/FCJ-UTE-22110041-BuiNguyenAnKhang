[{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/","title":"Devolping a music app using Beanstalk as core for backend and Amplify for front end management","tags":[],"description":"","content":"Building a serverless music app using AWS Overall In this lab, you\u0026rsquo;ll learn how to deploy a music app using Elastic Beanstalk as its core for backend and using Amplify and Amazon Cognito for the front end\nContent Introduction to the lab Knowledge and things to know before starting the lab How to deploy the backend How to enhance the frontend How to create aws key How to clean up "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/3-backenddeployment/3.1-deploythesongsons3/","title":"Deploy for the songs&#39; data","tags":[],"description":"","content":"Step 1: We will need to create an S3 bucket In your home menu, search S3 and click on it In the main console for S3 click Create bucket Step 2: Now we need to set the configuration for the bucket We need to set a name for the bucket and set it a unique name, here i will call my bucket music-app-audio-files In the Block Public Access settings for this bucket section Deselect the Block all public access box then click the Warning box After that scroll down to the bottom and select the create bucket\nNote: remember your bucket name and its region Step 3 After AWS create our bucket we will need to deploy our data Click on the bucket we just created Then select the upload button After that we will select the Add folder Then locate the place where we will store our songs You can download my song folder here: Songs link My structure for the song folder is Now we will select the upload option Wait until it finished all the upload Step 4: Set up the permission After we upload every thing you can go and check it structure just as my structure Now select a random folder and click on it here i will choose the song called The Riot You can choose 1 or 3 of it attributes but I will recommand choosing the picture so when we finish and test it again it will not download the song to your computer After click on the song image you will see its properties Copy in the Object URL and paste it in another tab it will return access denied This is due to we are only set public for the bucket not its content so to view its content we will need to add a new bucket policy Head back to the music_app_audio_files and select the permission tab Here we can see the policy of the bucket is empty and it is currently allow public access Now select the \u0026ldquo;Edit\u0026rdquo; button in the bucket policy setting and paste this in\njson { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowPublicRead\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::music-app-audio-files/*\u0026#34; } ] } After select the save changes option, head back to the other tab and reload you should be able to load the image\nRemember to change the resource bucket\u0026rsquo;s name into your bucket name In this step you can go with pre-signed URLs in code(backend Java, Python, etc) however these URLs will expire after a short time but are safe for limited access. "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/1-introduce/","title":"Introduction","tags":[],"description":"","content":"In this step, we will talk about what is the purpose of this and which overall structures of this lab\nContent Purpose of the lap The technologies structure of the lap "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/2-preparation/2.1-thesourcecodeoftheapp/","title":"Preparing the backend and the frontend","tags":[],"description":"","content":"Technologies for Backend and Frontend Frontend Java (Android)\nJava because - one of the most stable and widely used languages for Android app development. Retrofit for API communication and Amplify SDK for AWS integration. XML layouts for building responsive UI. Long-term support and a large developer community make Java a reliable choice. XML (Layout Design)\nProvides a structured and flexible way to design UI components. Separates design from logic, making the application easier to maintain and extend. Works seamlessly with Android Studio’s preview system.\nlink frontend Backend Spring Boot (Java)\nChosen for its simplicity and porful ecosystem in building RESTful APIs. Supports rapid development with embedded servers like Tomcat. ll-suited for cloud deployment (Elastic Beanstalk). Provides built-in integration with JPA/Hibernate for database operations. Maven (Build \u0026amp; Dependency Management)\nAutomates project builds, dependency management, and packaging into .jar files. Ensures consistency across environments and simplifies deployment to AWS Elastic Beanstalk.\nlink backend "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/1-introduce/1.1-purpose/","title":"Purpose of the app","tags":[],"description":"","content":"Introduction In the context of the rapid development of digital technology, music has become an indispensable part of people\u0026rsquo;s daily lives. Creating an online music streaming application not only meets entertainment needs but also connects users to a diverse and rich world of music. With the popularity of platforms like Spotify, developing a similar application and integrating modern, user‑friendly features is an effective solution to enhance the music listening experience and attract users.\nThis project focuses on building an online music streaming application based on Java Spring Boot, inspired by Spotify. The system is designed with key features such as:\nOnline music playback Creating and managing playlists Searching and recommending songs based on user preferences Managing user accounts Supporting offline music downloads for convenience and flexibility The development process applied core principles of Software Engineering, including:\nRequirements analysis (SRS) System design with Use Case diagrams, Class diagrams, Sequence diagrams, and Collaboration diagrams Building an object‑oriented system architecture Integrating APIs to deliver a smooth and high‑quality music streaming experience Through the implementation of the project, the team had the opportunity to apply theoretical knowledge to practice, covering requirements analysis, system design, deployment, and testing. This process not only deepened the team’s understanding of the software development lifecycle but also honed programming, problem‑solving, and teamwork skills.\nHowever, due to time constraints and limited experience, the development process inevitably faced some challenges — from suboptimal interface design to system performance limitations. These shortcomings serve as valuable lessons, and the team welcomes contributions and feedback to further refine the lab in the future.\nTo ensure scalability, security, and reliability, the system is hosted on AWS. It uses Elastic Beanstalk to deploy the backend, RDS (Aurora MySQL) for database management, S3 for media storage, and Amplify (Cognito) for authentication and frontend integration. This cloud‑based architecture ensures the application can grow with user demand while maintaining high performance and availability.\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/1-introduce/1.2-structure/","title":"Technologies structure of the lab","tags":[],"description":"","content":"AWS Structure Structure "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/2-preparation/2.2-awsservicesusing/","title":"AWS Services In The Lab","tags":[],"description":"","content":"Backend Elastic Beanstalk Hosts the Spring Boot backend app (MusicApp.jar) built with Java 21 + Maven. Deployment flow: Code → mvn clean package → generates .jar in target/. Procfile runs the .jar on EB instances. eb deploy uploads and provisions the app. Environment variables (DB_URL, DB_USER, DB_PASS, Gmail SMTP creds, etc.) are set via eb setenv. Provides load balancing + auto-scaling so the backend scales with user demand. S3 Bucket is created for file storage (future usage in music app). Planned use cases: Store music files uploaded by artists. Store album covers / profile images. Serve files directly to frontend with pre-signed URLs (secure download). Backend can generate S3 pre-signed URLs for controlled access. Aurora and RDS Currently using Amazon RDS (MySQL 8.0) in ap-southeast-2. Example connection: spring.datasource.url=jdbc:mysql://musicapp-db.c7a64kgsc9iz.ap-southeast-2.rds.amazonaws.com:3306/music_app spring.datasource.username=admin spring.datasource.password=****** Stores: User accounts (id, email, username, password hash). Profiles (full name, phone, etc.). Password reset codes \u0026amp; tokens. Will later hold music metadata (songs, playlists, likes, etc.). Frontend Amplify Integrated into Android frontend (Java) with Amplify Android v2.23.0. Amplify Plugins in MyApplication: Auth → Cognito User Pools for sign-up / login / token refresh. API (configured, but backend still uses Retrofit for REST). How it works in your app now: User logs in via Amplify → Cognito issues ID + access tokens. Retrofit APIs use these tokens (JWT) to call backend endpoints on Elastic Beanstalk. Backend validates the token, processes request, and queries RDS. Amplify also manages session persistence (so users stay logged in after reopening the app). Flow Summary Android App (Amplify Cognito) → Authenticates user. App uses Retrofit APIs → Calls Spring Boot backend hosted on Elastic Beanstalk. Backend talks to RDS (user + app data) and S3 (media storage). "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/3-backenddeployment/3.2-deploythedatabaseonaurorards/","title":"Connect to Private instance","tags":[],"description":"","content":"Content: Set up for the Aurora RDS Set up query "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/3-backenddeployment/3.3-deploythebackendonelasticbeanstalk/","title":"Deploy the backend on Elastic Beanstalk","tags":[],"description":"","content":"To setup backend you will have to follow these steps Set up all the environment variable 1st Step: Create a clean package Locate to the backend file and run this command mvn clean package to create a musicapp-0.0.1-SNAPSHOT.jar 2nd Step: Clone the elasticbeanstalk and install virtualenz Clone the repository through this link Github Then remember to install virtualenv using this command pip install virtualenv After that you need to set the environmental variables for it\n3rd step: Set the environmental variable for the virtualenv My path is this but your path maybe different so remember to check it 1st C:\\Users\\MyUserName\\AppData\\Roaming\\Python\\Python311\\Scripts .Open Edit Environment Variables then click on Environment Variables After that choose Path in User Variables and click Edit Click new and paste the path of your virtualenv and click ok to save it 4th step: Set up the eb After complete those steps open a new cmd/powercell and run this virtualenv --version to check if it is working or not cd to the place you clone the repository at mine is cd C:\\h\\aws-elastic-beanstalk-cli-setup\\scripts after that run python ebcli_installer.py Then run the command as it guides\nCMD Prompt: cmd.exe /c \u0026quot;C:\\Users\\AnKhang\\.ebcli-virtual-env\\executables\\path_exporter.bat\u0026quot; PowerShell: \u0026amp; \u0026quot;C:\\Users\\AnKhang\\.ebcli-virtual-env\\executables\\path_exporter.vbs\u0026quot; 5th step : Remember to check Internet Informtation Services Thats right for eb to work you will need to turn on the Internet Information Services Go to Control Panel/Programs then click on the Turn Window features on or off If it is on you are okay to continue but if it is off you must turn it on Now lets head back to the powershell or cmd and run eb --version If you get the result like the picture, congratulation you have finised the set up step. If not, try again.\n6th step: Create a procfile Go to the the folder where you have the proc file and open cmd/powershell Then create a Procfile in that folder After that go into the Procfile and write this content web: java -jar MusicApp-0.0.1-SNAPSHOT.jar Note: You can create a Procfile.txt with that content then rename it and delete the txt part 7th step: Create a key pair We will need to create a key pair ,go to EC2 in the network and security tabs select Keyparis After that select create keypair name it like you like and select the format for it is .pem Then click create After that open cmd again and run aws configure Enter your access key id and secret access key\nFor how to create it visit here Starting to deploy Step 1: go to the target folder and open a cmd or powercell Run the eb init command to start config the elastic beanstalk Cause I am currently in VietNam so I will choose the region 8 Here because I already create an application so I just need to choose it and if you don\u0026rsquo;t have you can go with option 2 The backend we are using is java springboot so we will go with option 5 Our java version is 21 so we will go with option 1 Here I will go with Y for SSH because it is useful for debugging logs, installing tools,etc. but you don\u0026rsquo;t have to follow me on this Note: that in before this section there can be a option for code commit remember to choose option no(n) After that it will ask for your keypair just input the keypair you created The passphrase is optional but if you want to improve the security you can input it Run the command eb create [your env name] to create the env Note: that if there is a error like this that means you have deleted the default vpc and need to go to vpc and click create default vpc After it successfully deploy it will return something like this Note: if you see this error it is because you have not config aws Now if you visit it domain it will return a 502 error This is because we have not set up our environment variables Now we need to copy the domain link and save it in a note Now go to the configuration and scroll down to Updates Monitoring and and logging And select edit Then add 6 more variable like this Now if we reload the domain it will return the error of 401 This is because the spring boot security in the backend so don\u0026rsquo;t worry now we just need to edit the front end\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/2-preparation/","title":"Preparation ","tags":[],"description":"","content":" You will need to know about the technologies we are using for the backend and frontend and which services of AWS will use for this lab\nContent Backend and Frontend source code and technologies AWS Services are used in this lab "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/3-backenddeployment/3.2-deploythedatabaseonaurorards/3.2.1-setuptheaurorardsconfig/","title":"Set up the config for Aurora and RDS","tags":[],"description":"","content":"Open the Aurora and RDS dashboard then select create a database Choose my SQL and template as Free Tier (You can choose different tier if you like) Scroll down to the setting option, set the DB instance as you want, here I will set it as musicapp-db and username is admin, set the password as you want In connectivity option, change public access to yes and let everything as defult Scroll down to the Additional Configuration, change the name to music_app Then select create and database and go to the database you just created to see it properties Remember to copy the endpoint so we can use it later Now go to EC2 Security Group select the security group Select Edit inbound rule Add new rule Type MySQL/Aurora Source MyIP Note you can set source as Any where ipV4 to be easier to access "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/3-backenddeployment/3.2-deploythedatabaseonaurorards/3.2.2-queryfortheaurorards/","title":"Set up the query for Aurora and RDS","tags":[],"description":"","content":"Open the DBeaver Right click and a new connection Choose type of dayabase is my SQL Fill out all the information that we have created Then create a new SQL script Then executed these sql commad one by one don\u0026rsquo;t execute all at once link sql\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/3-backenddeployment/","title":"How to deploy the backend","tags":[],"description":"","content":"In this part, I will show you how to deploy backend easily on AWS with 3 main steps\nContent 3.1. How to deploy the songs\u0026rsquo;data on S3\n3.2. How to deploy the database on Aurora and RDS\n3.3 How to deploy the backend on Elastic Beanstalk\n"},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/4-frontendenhancement/","title":"How to enhance frontend","tags":[],"description":"","content":"In this step, will learn how to use amplify to enhance the end user\u0026rsquo;s experience Open the cmd in you front end location and use this command npm install -g @aws-amplify-cli Then run the command amplify init to start the configuration. Then when it ask if you want to accept the defult configuration remember to said no Then please config as follow\nName of the environment dev Default editor Android Studio Type of app .android Res directory app\\src\\main\\res\\ When it ask for your AWS access key you need to provide the key you have save Note: if you don\u0026rsquo;t have your key please check After that it finish, you will see some thing like this You can go back the folder where you have the frontend, now you will see that it has created an amplify file Inside it is an amplify and an aws configuration Now open the termminal in android studio and run this amplify add auth Then after it finished run this command amplify push After it finished, it will return something like this Open the build.gradle in the app/ folder and add these in the dependencies implementation \u0026quot;com.amplifyframework:core:2.23.0\u0026quot; implementation \u0026quot;com.amplifyframework:aws-auth-cognito:2.23.0\u0026quot; implementation \u0026quot;com.amplifyframework:aws-api:2.23.0\u0026quot; coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4' Create a new MyApplication.java file in the same folder as MainActivity: package com.example.musicapp; import android.app.Application; import android.util.Log; import com.amplifyframework.AmplifyException; import com.amplifyframework.core.Amplify; import com.amplifyframework.auth.cognito.AWSCognitoAuthPlugin; public class MyApplication extends Application { @Override public void onCreate() { super.onCreate(); try { Amplify.addPlugin(new AWSCognitoAuthPlugin()); Amplify.configure(getApplicationContext()); Log.i(\u0026#34;MyAmplifyApp\u0026#34;, \u0026#34;Initialized Amplify v2\u0026#34;); } catch (AmplifyException e) { Log.e(\u0026#34;MyAmplifyApp\u0026#34;, \u0026#34;Could not initialize Amplify\u0026#34;, e); } } } After that, open the AndroidManifest and add this android:name=\u0026quot;.MyApplication\u0026quot; Now go back to the build.gradle and add this in compileOptions of android\ncoreLibraryDesugaringEnabled true And scroll up to the top manifset and add these \u0026lt;uses-permission android:name=\u0026quot;android.permission.POST_NOTIFICATIONS\u0026quot; /\u0026gt; After that open the terminal again and run ./gradlew clean build --refresh-dependencies Finally just change the base url in the RetrofitService in the ultis and change the link to your domain "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/5-createawskey/","title":"Create access key","tags":[],"description":"","content":"Go to IAM User Now select the Create access key Select the cli option Skip step 2 and remember to download the csv file because if you forget the secret access key you will lost it forever so download it to be safe "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/6-cleanup/","title":"Clean up resources","tags":[],"description":"","content":"Go to Aurora RDS and choose the database and in the Action choose Delete Note do not create any backup (you can do it if you want but i would not reccomand it) Go to S3 and select the bucket music-app-audio-files You will need to empty it content before deleting it Select all the content in the bucket and select delete Confirm and delete it Now go back to the S3 bucket, you can delete it now Note if you can not delete it remember to go to the Permission tab of the bucket and check the bucket pollicy to make sure it allow delete Change the deny to allow and you are good to delete it Go to the Elastic Beanstalk-\u0026gt;Environment Then select the environment and choose action Terminate Now go to the VPC-\u0026gt; Your VPC and delete all the vpc "},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://kangtherooster.github.io/FCJ-UTE-22110041-BuiNguyenAnKhang/tags/","title":"Tags","tags":[],"description":"","content":""}]